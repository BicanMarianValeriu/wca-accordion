<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Modules\Formatting
 * @copyright   Copyright (c) 2024, WeCodeArt Framework
 * @since 		6.3.7
 * @version		6.3.7
 */

namespace WeCodeArt\Support\Modules;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Config\Traits\Asset;
use WeCodeArt\Config\Traits\Singleton;
use WeCodeArt\Config\Interfaces\Integration;
use function WeCodeArt\Functions\get_prop;
use function WeCodeArt\Functions\toJSON;

/**
 * The Accordion object.
 */
final class Accordion implements Integration {

    use Asset;
    use Singleton;

	/**
	 * Get Conditionals
	 *
	 * @return void
	 */
	public static function get_conditionals() {
		wecodeart( 'ifso' )->register( 'has_wp_interactivity', Accordion\Condition::class );

		return [ 'has_wp_interactivity' ];
	}

	/**
	 * Send to Constructor
	 */
	public function register_hooks() {
		\add_action( 'init',						[ $this, 'register_block'	], 20, 1 );
		\add_action( 'enqueue_block_editor_assets',	[ $this, 'editor_assets'	], 20, 1 );
	}

	/**
	 * Register block.
	 *
	 * @return  void
	 */
	public function register_block(): void {
		\wp_enqueue_block_style( 'wecodeart/accordion', [
			'handle' 	=> $this->make_handle(),
			'src'		=> $this->get_asset( 'css', 'index' ),
			'path'		=> $this->get_asset( 'css', 'index', true ),
			'deps'		=> [],
			'ver'		=> wecodeart( 'version' )
		] );

		\register_block_type_from_metadata( dirname( __FILE__ ) . '/accordion-block.json', [
			'render_callback'   => [ $this, 'render_accordion' ],
		] );
			
		\register_block_type_from_metadata( dirname( __FILE__ ) . '/accordion-item-block.json', [
			'render_callback' => [ $this, 'render_accordion_item' ]
		] );
	}

	/**
	 * Dynamically renders the `wecodeart/accordion` block.
	 *
	 * @param 	array 	$attributes	The attributes.
	 * @param 	string 	$content 	The block markup.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render_accordion( array $attributes = [], string $content = '' ): string {
		$p = new \WP_HTML_Tag_Processor( $content );
		$p->next_tag();

		$accordion_id = $p->get_attribute( 'id' ) ?: wp_unique_id( 'wp-accordion-' );
		$p->set_attribute( 'id', $accordion_id );

		$p->set_attribute( 'data-wp-interactive', 'wecodeart/accordion' );
		$p->set_attribute( 'data-wp-context', toJSON( [
			'multiExpand' 	=> get_prop( $attributes, [ 'multiExpand' ], true ),
			'elements'		=> [],
		] ) );

		if( get_prop( $attributes, [ 'multiExpand' ] ) === false ) {
			$p->set_attribute( 'data-wp-init--multiple', 'callbacks.multiExpand' );
		}

		$content = $p->get_updated_html();

		return $content;
	}
	
	/**
	 * Dynamically renders the `wecodeart/accordion-item` block.
	 *
	 * @param 	array 	$attributes	The attributes.
	 * @param 	string 	$content 	The block markup.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render_accordion_item( array $attributes = [], string $content = '', object $block = null ): string {
		$is_open = get_prop( $attributes, [ 'isOpen' ], false );

		$p = new \WP_HTML_Tag_Processor( $content );
		$p->next_tag();

		$item_id = $p->get_attribute( 'id' ) ?: wp_unique_id( 'wp-accordion-item-' );
		$p->set_attribute( 'data-wp-interactive', 'wecodeart/collapse' );
		$p->set_attribute( 'data-wp-context', toJSON( [
			'isOpen' => $is_open,
		] ) );

		$p->set_attribute( 'data-wp-init', 'wecodeart/accordion::callbacks.addElement' );

		if ( $p->next_tag( [
			'class_name'=> 'wp-accordion-item__button'
			] ) ) {
			$p->set_attribute( 'data-wp-bind--aria-label', 'state.ariaLabel' );
			$p->set_attribute( 'data-wp-bind--aria-expanded', 'context.isOpen' );
			$p->set_attribute( 'data-wp-on--click', 'actions.toggle' );
			$p->set_attribute( 'data-wp-class--collapsed', '!context.isOpen' );
			$p->set_attribute( 'aria-controls', $item_id . '-content' );
			$p->set_attribute( 'aria-label', $is_open ? esc_html__( 'Close item', 'wecodeart' ) : esc_html__( 'Open item', 'wecodeart' ) );
			$p->set_attribute( 'aria-expanded', $is_open ? 'true' : 'false' );
			$p->set_attribute( 'id', $item_id . '-toggle' );
			$p->set_attribute( 'type', 'button' );

			if( ! $is_open ) {
				$p->add_class( 'collapsed' );
			}
		}

		if ( $p->next_tag( [
			'class_name' => 'wp-accordion-item__content'
		] ) ) {
			$p->set_attribute( 'aria-labeledby', $item_id . '-toggle' );
			$p->set_attribute( 'id', $item_id . '-content' );
			$p->set_attribute( 'role', 'region' );
			$p->add_class( 'collapse' );

			if( $is_open ) {
				$p->add_class( 'show' );
			}
		}

		\wp_interactivity_config( 'wecodeart/collapse', [
			'ariaLabel'	=>	[
				'collapsed' => esc_html__( 'Open item', 'wecodeart' ),
				'expanded'	=> esc_html__( 'Close item', 'wecodeart' )
			],
			'classNames' => [
				'show' 			=> 'show',
				'collapse' 		=> 'collapse',
				'collapsing' 	=> 'collapsing'
			]
		] );
		
		wecodeart( 'styles' )->Components->load( [ 'transition' ] );

		$content = $p->get_updated_html();

		return $content;
	}
	
	/**
	 * Editor assets.
	 *
	 * @return  void
	 */
	public function editor_assets(): void {
		wp_enqueue_script(
			$this->make_handle(),
			$this->get_asset( 'js', 'index' ),
			[ 'wp-block-editor', 'wp-blocks', 'wp-rich-text', 'wp-components', 'wp-data', 'wp-i18n' ],
			wecodeart( 'version' )
		);
	}

	/**
	 * Get file.
	 *
	 * @return string
	 */
	public function get_asset( string $type, string $name, bool $path = false ): string {
		$file_path = wecodeart_if( 'is_dev_mode' ) ? 'unminified' : 'minified';
		$file_name = wecodeart_if( 'is_dev_mode' ) ? $name . '.' . $type :  $name . '.min.' . $type;
		$file_path = '/assets/' . $file_path . '/' . $type . '/' . $file_name;

		if( $path ) {
			$file_path = __DIR__ . $file_path;

			return wp_normalize_path( $file_path );
		}
		
		$file_uri 	= str_replace( realpath( get_template_directory() ), get_template_directory_uri(), __DIR__ );
		$file_path 	= wp_normalize_path( $file_uri . $file_path );

		return esc_url( $file_path );
	}
}